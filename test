def get_vm_ipv4_address(ssh, values):
    
    vm_status = values.get("vm_status")
    ci_ipaddress = values.get("ci_ipaddress")
    ci_network = values.get("ci_network")
    max_wait_time = 300  # max wait time in seconds
    check_interval = 10  # time interval between retries in seconds
    total_waited = 0

    if not vm_status == "running":
        first_line = f"Waiting for virtual server '{vm_name}' to start."
        secound_line = " QEMU agent to respond...",
        functions.output_message(
            first_line+secound_line,
            "w"
        )
    else:
        functions.output_message(
            f"Waiting for virtual server '{vm_name}' QEMU agent to respond...",
            "w"
        )

    if ci_network == "dhcp" or ci_network == "DHCP":

        while total_waited < max_wait_time:
            try:
                command = f"qm agent {vm_id} network-get-interfaces"
                stdin, stdout, stderr = ssh.exec_command(command)
                # Wait for command to complete
                stdout.channel.recv_exit_status()
                output = stdout.read().decode('utf-8').strip()
                error_output = stderr.read().decode('utf-8').strip()

                if error_output:
                    first_line = f"'{vm_name}' QEMU agent not responding to "
                    secound_line = "request - retrying in "
                    third_line = f"{check_interval} sec."
                    functions.output_message(
                        first_line+secound_line+third_line,
                        "w"
                    )
                    total_waited += check_interval
                    # Retry after the specified interval
                    time.sleep(check_interval)
                    continue

                # Parse the JSON output from the command
                interfaces = json.loads(output)
                ipv4_address = None

                # Loop through the interfaces to
                # find 'eth0' and its IPv4 address
                for interface in interfaces:
                    print(f"{interface}")
                    if interface.get("name") == {DEFAULT_NIC}:
                        for ip in interface.get("ip-addresses", []):
                            if ip.get("ip-address-type") == "ipv4":
                                ipv4_address = ip.get("ip-address")
                                if not ipv4_address == "127.0.0.1":
                                    break

                if ipv4_address:
                    first_line = f"'{vm_name}' has IPv4 address: "
                    secound_line = f"{ipv4_address} on '{DEFAULT_NIC}'."
                    functions.output_message(
                        first_line+secound_line,
                        "s"
                    )
                    return ipv4_address
                else:
                    first_line = f"'{vm_name}' No IPv4 address found "
                    secound_line = f"on '{DEFAULT_NIC}' interface.",
                    functions.output_message(
                        first_line+secound_line,
                        "e"
                    )
                    total_waited += check_interval
                    # Retry after the specified interval
                    time.sleep(check_interval)

            except Exception as e:
                first_line = f"'{vm_name}' Failed to retrieve VM "
                secound_line = f"network interfaces: {e}"
                functions.output_message(
                    first_line+secound_line,
                    "e"
                )
                total_waited += check_interval
                # Retry after the specified interval
                time.sleep(check_interval)

    if ci_network == "static" or ci_network == "STATIC":
        return ci_ipaddress

    first_line = f"'{vm_name}' Failed to get the VM IPv4 "
    secound_line = f"address within {max_wait_time} seconds."
    functions.output_message(
        first_line+secound_line,
        "e"
    )
    return None